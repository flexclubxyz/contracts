{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/Flexclub003.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract FlexClub003 is ReentrancyGuard {\n    struct Goal {\n        string name;\n        string description;\n        uint256 pooled;\n        uint256 target;\n        uint256 deadline;\n        uint256 contributors;\n    }\n\n    mapping(address => uint256) public balances;\n    mapping(address => bool) private hasContributed;\n    Goal public goal;\n    address public donationWallet;\n    bool public fundsWithdrawn;\n\n    event Deposit(address indexed user, uint256 amount);\n    event Withdrawal(address indexed recipient, uint256 amount);\n    event GoalInfoUpdated(\n        string name,\n        string description,\n        uint256 pooled,\n        uint256 target,\n        uint256 deadline,\n        uint256 contributors\n    );\n\n    constructor(\n        address _donationWallet,\n        uint256 _deadline,\n        string memory _goalName,\n        string memory _goalDescription,\n        uint256 _targetAmount\n    ) {\n        require(_donationWallet != address(0), \"Invalid donation wallet address\");\n        require(_deadline > block.timestamp, \"Deadline must be in the future\");\n\n        donationWallet = _donationWallet;\n        goal = Goal(_goalName, _goalDescription, 0, _targetAmount, _deadline, 0);\n        fundsWithdrawn = false;\n    }\n\n    receive() external payable {\n        _processDeposit();\n    }\n\n    function deposit() public payable {\n        _processDeposit();\n    }\n\n    function _processDeposit() private nonReentrant {\n        require(block.timestamp < goal.deadline, \"The deadline has passed\");\n        require(msg.value > 0, \"Deposit amount must be greater than zero\");\n        require(!fundsWithdrawn, \"Funds have already been withdrawn\");\n\n        balances[msg.sender] += msg.value;\n        goal.pooled += msg.value;\n\n        // Update unique contributor count\n        if (!hasContributed[msg.sender]) {\n            hasContributed[msg.sender] = true;\n            goal.contributors += 1;\n        }\n\n        emit Deposit(msg.sender, msg.value);\n        emit GoalInfoUpdated(\n            goal.name,\n            goal.description,\n            goal.pooled,\n            goal.target,\n            goal.deadline,\n            goal.contributors\n        );\n    }\n\n    function withdraw() public nonReentrant {\n        require(msg.sender == donationWallet, \"Only the donation wallet can withdraw\");\n        require(\n            block.timestamp >= goal.deadline || goal.pooled >= goal.target,\n            \"Cannot withdraw before deadline or target is reached\"\n        );\n        require(!fundsWithdrawn, \"Funds have already been withdrawn\");\n        require(goal.pooled > 0, \"No funds to withdraw\");\n\n        fundsWithdrawn = true;\n        uint256 amount = address(this).balance;\n\n        // Transfer the pooled ETH to the donation wallet\n        (bool success, ) = donationWallet.call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n\n        emit Withdrawal(donationWallet, amount);\n        emit GoalInfoUpdated(\n            goal.name,\n            goal.description,\n            0, // Reset pooled amount to zero\n            goal.target,\n            goal.deadline,\n            goal.contributors\n        );\n    }\n\n    /**\n     * @notice Allows users to cancel their contribution and withdraw their deposited amount\n     *         provided the donation wallet hasn't withdrawn the funds yet.\n     */\n    function cancel() public nonReentrant {\n        require(!fundsWithdrawn, \"Funds have already been withdrawn\");\n        uint256 userBalance = balances[msg.sender];\n        require(userBalance > 0, \"No balance to withdraw\");\n\n        // Update state before transferring to prevent reentrancy attacks\n        balances[msg.sender] = 0;\n        goal.pooled -= userBalance;\n\n        // Transfer the user's ETH back\n        (bool success, ) = msg.sender.call{value: userBalance}(\"\");\n        require(success, \"Transfer failed\");\n\n        emit Withdrawal(msg.sender, userBalance);\n        emit GoalInfoUpdated(\n            goal.name,\n            goal.description,\n            goal.pooled,\n            goal.target,\n            goal.deadline,\n            goal.contributors\n        );\n    }\n\n    function getGoalInfo()\n        public\n        view\n        returns (\n            string memory name,\n            string memory description,\n            uint256 pooled,\n            uint256 target,\n            uint256 deadline,\n            uint256 contributors\n        )\n    {\n        return (\n            goal.name,\n            goal.description,\n            goal.pooled,\n            goal.target,\n            goal.deadline,\n            goal.contributors\n        );\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}